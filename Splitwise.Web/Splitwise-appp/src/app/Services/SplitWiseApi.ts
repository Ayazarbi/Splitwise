/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.8.2.0 (NJsonSchema v10.2.1.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export module SplitWise {
export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable()
export class WeatherForecastClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:5001";
    }

    get(): Observable<WeatherForecast[]> {
        let url_ = this.baseUrl + "/WeatherForecast";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(<any>response_);
                } catch (e) {
                    return <Observable<WeatherForecast[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<WeatherForecast[]>><any>_observableThrow(response_);
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<WeatherForecast[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(WeatherForecast.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<WeatherForecast[]>(<any>null);
    }
}

@Injectable()
export class AccountClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:5001";
    }

    logout(){
        localStorage.removeItem("id"),
        localStorage.removeItem("token");
    }

    register(model: SignupModel): Observable<FileResponse> {
        let url_ = this.baseUrl + "/Account/Register";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRegister(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRegister(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse>><any>_observableThrow(response_);
        }));
    }

    protected processRegister(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(<any>null);
    }

    login(model: LoginModel) {
        let url_ = this.baseUrl + "/Account/Login";
        url_ = url_.replace(/[?&]$/, "");

       return this.http.post(url_,model);

        // const content_ = JSON.stringify(model);

        // let options_ : any = {
        //     body: content_,
        //     observe: "response",
        //     responseType: "application/json",
        //     headers: new HttpHeaders({
        //         "Content-Type": "application/json",
        //         "Accept": "application/octet-stream"
        //     })
        // };

        // return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
        //     return this.processLogin(response_);
        // })).pipe(_observableCatch((response_: any) => {
        //     if (response_ instanceof HttpResponseBase) {
        //         try {
        //             return this.processLogin(<any>response_);
        //         } catch (e) {
        //             return <Observable<FileResponse>><any>_observableThrow(e);
        //         }
        //     } else
        //         return <Observable<FileResponse>><any>_observableThrow(response_);
        // }));
    }
    protected processLogin(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(<any>null);
    }

    checklogin(){

        var token=localStorage.getItem("token")
        if(token){
            return true;
        }
        return false;
    }

    chanagepassword(id: string | null, model: ResetpasswordModel): Observable<Applicationuser> {
        let url_ = this.baseUrl + "/Account/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processChanagepassword(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processChanagepassword(<any>response_);
                } catch (e) {
                    return <Observable<Applicationuser>><any>_observableThrow(e);
                }
            } else
                return <Observable<Applicationuser>><any>_observableThrow(response_);
        }));
    }

    protected processChanagepassword(response: HttpResponseBase): Observable<Applicationuser> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Applicationuser.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Applicationuser>(<any>null);
    }

    getuser(id: string | null): Observable<UserModel> {
        let url_ = this.baseUrl + "/Account/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetuser(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetuser(<any>response_);
                } catch (e) {
                    return <Observable<UserModel>><any>_observableThrow(e);
                }
            } else
                return <Observable<UserModel>><any>_observableThrow(response_);
        }));
    }

    protected processGetuser(response: HttpResponseBase): Observable<UserModel> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<UserModel>(<any>null);
    }

    // logout(){
    //     // let url_ = this.baseUrl + "/Account";
    //     // url_ = url_.replace(/[?&]$/, "");

    //     // let options_ : any = {
    //     //     observe: "response",
    //     //     responseType: "blob",
    //     //     headers: new HttpHeaders({
    //     //         "Accept": "application/octet-stream"
    //     //     })
    //     // };

    //     // return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
    //     //     return this.processLogout(response_);
    //     // })).pipe(_observableCatch((response_: any) => {
    //     //     if (response_ instanceof HttpResponseBase) {
    //     //         try {
    //     //             return this.processLogout(<any>response_);
    //     //         } catch (e) {
    //     //             return <Observable<FileResponse>><any>_observableThrow(e);
    //     //         }
    //     //     } else
    //     //         return <Observable<FileResponse>><any>_observableThrow(response_);
    //     // }));
    // }

    // protected processLogout(response: HttpResponseBase): Observable<FileResponse> {
    //     const status = response.status;
    //     const responseBlob =
    //         response instanceof HttpResponse ? response.body :
    //         (<any>response).error instanceof Blob ? (<any>response).error : undefined;

    //     let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    //     if (status === 200 || status === 206) {
    //         const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
    //         const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
    //         const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
    //         return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
    //     } else if (status !== 200 && status !== 204) {
    //         return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
    //         return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    //         }));
    //     }
    //     return _observableOf<FileResponse>(<any>null);
    // }
}

@Injectable()
export class ExpenseClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:5001";
    }

    add(expenseModel: ExpenseModel): Observable<Expense> {
        let url_ = this.baseUrl + "/Expense";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(expenseModel);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAdd(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAdd(<any>response_);
                } catch (e) {
                    return <Observable<Expense>><any>_observableThrow(e);
                }
            } else
                return <Observable<Expense>><any>_observableThrow(response_);
        }));
    }

    protected processAdd(response: HttpResponseBase): Observable<Expense> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Expense.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Expense>(<any>null);
    }

    getexpense(id: number): Observable<ExpenseModel> {
        let url_ = this.baseUrl + "/Expense/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetexpense(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetexpense(<any>response_);
                } catch (e) {
                    return <Observable<ExpenseModel>><any>_observableThrow(e);
                }
            } else
                return <Observable<ExpenseModel>><any>_observableThrow(response_);
        }));
    }

    protected processGetexpense(response: HttpResponseBase): Observable<ExpenseModel> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ExpenseModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ExpenseModel>(<any>null);
    }

    edit(id: number, expenseModel: ExpenseModel): Observable<ExpenseModel> {
        let url_ = this.baseUrl + "/Expense/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(expenseModel);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processEdit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processEdit(<any>response_);
                } catch (e) {
                    return <Observable<ExpenseModel>><any>_observableThrow(e);
                }
            } else
                return <Observable<ExpenseModel>><any>_observableThrow(response_);
        }));
    }

    protected processEdit(response: HttpResponseBase): Observable<ExpenseModel> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ExpenseModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ExpenseModel>(<any>null);
    }

    delete(id: number): Observable<Expense> {
        let url_ = this.baseUrl + "/Expense/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(<any>response_);
                } catch (e) {
                    return <Observable<Expense>><any>_observableThrow(e);
                }
            } else
                return <Observable<Expense>><any>_observableThrow(response_);
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<Expense> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Expense.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Expense>(<any>null);
    }

    getcalculation(id: number): Observable<BorrowLentModel[]> {
        let url_ = this.baseUrl + "/Expense/Calculation/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetcalculation(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetcalculation(<any>response_);
                } catch (e) {
                    return <Observable<BorrowLentModel[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<BorrowLentModel[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetcalculation(response: HttpResponseBase): Observable<BorrowLentModel[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(BorrowLentModel.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<BorrowLentModel[]>(<any>null);
    }

    test(): Observable<FileResponse> {
        let url_ = this.baseUrl + "/Expense/Test";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processTest(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processTest(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse>><any>_observableThrow(response_);
        }));
    }

    protected processTest(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(<any>null);
    }
}

@Injectable()
export class FriendsClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:5001";
    }

    add(friend: Friend): Observable<Friend> {
        let url_ = this.baseUrl + "/Friends";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(friend);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAdd(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAdd(<any>response_);
                } catch (e) {
                    return <Observable<Friend>><any>_observableThrow(e);
                }
            } else
                return <Observable<Friend>><any>_observableThrow(response_);
        }));
    }

    protected processAdd(response: HttpResponseBase): Observable<Friend> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Friend.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Friend>(<any>null);
    }

    getfriend(id: string | null): Observable<Applicationuser[]> {
        let url_ = this.baseUrl + "/Friends/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetfriend(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetfriend(<any>response_);
                } catch (e) {
                    return <Observable<Applicationuser[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<Applicationuser[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetfriend(response: HttpResponseBase): Observable<Applicationuser[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Applicationuser.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Applicationuser[]>(<any>null);
    }

    delete(userid:string,friendid:string): Observable<Applicationuser> {



        return this.http.delete<Applicationuser>(this.baseUrl+"/Friends"+"/"+userid+"/"+friendid);
        // let url_ = this.baseUrl + "/Friends/{friendid}";
        // if (friendid === undefined || friendid === null)
        //     throw new Error("The parameter 'friendid' must be defined.");
        // url_ = url_.replace("{friendid}", encodeURIComponent("" + friendid));
        // url_ = url_.replace(/[?&]$/, "");

        // let options_ : any = {
        //     observe: "response",
        //     responseType: "blob",
        //     headers: new HttpHeaders({
        //         "Accept": "application/json"
        //     })
        // };

        // return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
        //     return this.processDelete(response_);
        // })).pipe(_observableCatch((response_: any) => {
        //     if (response_ instanceof HttpResponseBase) {
        //         try {
        //             return this.processDelete(<any>response_);
        //         } catch (e) {
        //             return <Observable<Applicationuser>><any>_observableThrow(e);
        //         }
        //     } else
        //         return <Observable<Applicationuser>><any>_observableThrow(response_);
        // }));
    }

    protected processDelete(response: HttpResponseBase): Observable<Applicationuser> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Applicationuser.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Applicationuser>(<any>null);
    }
}

@Injectable()
export class GroupClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:5001";
    }

    add(group: GroupModel): Observable<Group> {
        let url_ = this.baseUrl + "/Group";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(group);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAdd(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAdd(<any>response_);
                } catch (e) {
                    return <Observable<Group>><any>_observableThrow(e);
                }
            } else
                return <Observable<Group>><any>_observableThrow(response_);
        }));
    }

    protected processAdd(response: HttpResponseBase): Observable<Group> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Group.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Group>(<any>null);
    }

    getallgroups(): Observable<Group[]> {
        let url_ = this.baseUrl + "/Group";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetallgroups(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetallgroups(<any>response_);
                } catch (e) {
                    return <Observable<Group[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<Group[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetallgroups(response: HttpResponseBase): Observable<Group[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Group.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Group[]>(<any>null);
    }

    getGroup(id: number): Observable<GroupModel> {
        let url_ = this.baseUrl + "/Group/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetGroup(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetGroup(<any>response_);
                } catch (e) {
                    return <Observable<GroupModel>><any>_observableThrow(e);
                }
            } else
                return <Observable<GroupModel>><any>_observableThrow(response_);
        }));
    }

    protected processGetGroup(response: HttpResponseBase): Observable<GroupModel> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GroupModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GroupModel>(<any>null);
    }

    delete(id: number): Observable<Group> {
        let url_ = this.baseUrl + "/Group/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(<any>response_);
                } catch (e) {
                    return <Observable<Group>><any>_observableThrow(e);
                }
            } else
                return <Observable<Group>><any>_observableThrow(response_);
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<Group> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Group.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Group>(<any>null);
    }

    edit(id: number, groupModel: GroupModel): Observable<GroupModel> {
        let url_ = this.baseUrl + "/Group/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(groupModel);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processEdit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processEdit(<any>response_);
                } catch (e) {
                    return <Observable<GroupModel>><any>_observableThrow(e);
                }
            } else
                return <Observable<GroupModel>><any>_observableThrow(response_);
        }));
    }

    protected processEdit(response: HttpResponseBase): Observable<GroupModel> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GroupModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GroupModel>(<any>null);
    }

    getGroupExpenses(id: number): Observable<Expense[]> {
        let url_ = this.baseUrl + "/Group/{id}/Expenses";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetGroupExpenses(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetGroupExpenses(<any>response_);
                } catch (e) {
                    return <Observable<Expense[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<Expense[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetGroupExpenses(response: HttpResponseBase): Observable<Expense[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Expense.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Expense[]>(<any>null);
    }

    getcalculations(id: number): Observable<BorrowLentModel> {
        let url_ = this.baseUrl + "/Group/{id}/calculations";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetcalculations(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetcalculations(<any>response_);
                } catch (e) {
                    return <Observable<BorrowLentModel>><any>_observableThrow(e);
                }
            } else
                return <Observable<BorrowLentModel>><any>_observableThrow(response_);
        }));
    }

    protected processGetcalculations(response: HttpResponseBase): Observable<BorrowLentModel> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BorrowLentModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<BorrowLentModel>(<any>null);
    }
}

@Injectable()
export class PaymentClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:5001";
    }

    add(transaction: TransactionModel): Observable<Transaction> {




        return this.http.post<Transaction>(this.baseUrl+"/Payment",transaction);
        // let url_ = this.baseUrl + "/Payment";
        // url_ = url_.replace(/[?&]$/, "");

        // const content_ = JSON.stringify(transaction);

        // let options_ : any = {
        //     body: content_,
        //     observe: "response",
        //     responseType: "blob",
        //     headers: new HttpHeaders({
        //         "Content-Type": "application/json",
        //         "Accept": "application/json"
        //     })
        // };

        // return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
        //     return this.processAdd(response_);
        // })).pipe(_observableCatch((response_: any) => {
        //     if (response_ instanceof HttpResponseBase) {
        //         try {
        //             return this.processAdd(<any>response_);
        //         } catch (e) {
        //             return <Observable<Transaction>><any>_observableThrow(e);
        //         }
        //     } else
        //         return <Observable<Transaction>><any>_observableThrow(response_);
        // }));
    }

    protected processAdd(response: HttpResponseBase): Observable<Transaction> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Transaction.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Transaction>(<any>null);
    }

    test(): Observable<FileResponse> {
        let url_ = this.baseUrl + "/Payment/Test";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processTest(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processTest(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse>><any>_observableThrow(response_);
        }));
    }

    protected processTest(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(<any>null);
    }
}

@Injectable()
export class UserClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:5001";
    }

    getUserExpenses(id: string | null): Observable<Expense[]> {
        let url_ = this.baseUrl + "/User/{id}/Expenses";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetUserExpenses(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetUserExpenses(<any>response_);
                } catch (e) {
                    return <Observable<Expense[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<Expense[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetUserExpenses(response: HttpResponseBase): Observable<Expense[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Expense.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Expense[]>(<any>null);
    }

    getUserGroups(id: string | null): Observable<Group[]> {
        let url_ = this.baseUrl + "/User/{id}/Groups";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetUserGroups(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetUserGroups(<any>response_);
                } catch (e) {
                    return <Observable<Group[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<Group[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetUserGroups(response: HttpResponseBase): Observable<Group[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Group.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Group[]>(<any>null);
    }

    getUserActivties(id: string | null): Observable<Activity[]> {
        let url_ = this.baseUrl + "/User/{id}/Activities";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetUserActivties(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetUserActivties(<any>response_);
                } catch (e) {
                    return <Observable<Activity[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<Activity[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetUserActivties(response: HttpResponseBase): Observable<Activity[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Activity.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Activity[]>(<any>null);
    }

    getuserTransaction(id: string | null): Observable<Transaction[]> {
        let url_ = this.baseUrl + "/User/{id}/Transactions";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetuserTransaction(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetuserTransaction(<any>response_);
                } catch (e) {
                    return <Observable<Transaction[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<Transaction[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetuserTransaction(response: HttpResponseBase): Observable<Transaction[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Transaction.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Transaction[]>(<any>null);
    }

    getallUsers(){
       return this.http.get(this.baseUrl+"/User");
    }
}

export class WeatherForecast implements IWeatherForecast {
    date?: Date;
    temperatureC?: number;
    temperatureF?: number;
    summary?: string | undefined;

    constructor(data?: IWeatherForecast) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
            this.temperatureC = _data["temperatureC"];
            this.temperatureF = _data["temperatureF"];
            this.summary = _data["summary"];
        }
    }

    static fromJS(data: any): WeatherForecast {
        data = typeof data === 'object' ? data : {};
        let result = new WeatherForecast();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["temperatureC"] = this.temperatureC;
        data["temperatureF"] = this.temperatureF;
        data["summary"] = this.summary;
        return data; 
    }
}

export interface IWeatherForecast {
    date?: Date;
    temperatureC?: number;
    temperatureF?: number;
    summary?: string | undefined;
}

export class SignupModel implements ISignupModel {
    username?: string | undefined;
    email?: string | undefined;
    password?: string | undefined;
    confirmpassword?: string | undefined;
    mobilenumber?: string | undefined;
    balance?: number;

    constructor(data?: ISignupModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.username = _data["username"];
            this.email = _data["email"];
            this.password = _data["password"];
            this.confirmpassword = _data["confirmpassword"];
            this.mobilenumber = _data["mobilenumber"];
            this.balance = _data["balance"];
        }
    }

    static fromJS(data: any): SignupModel {
        data = typeof data === 'object' ? data : {};
        let result = new SignupModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["username"] = this.username;
        data["email"] = this.email;
        data["password"] = this.password;
        data["confirmpassword"] = this.confirmpassword;
        data["mobilenumber"] = this.mobilenumber;
        data["balance"] = this.balance;
        return data; 
    }
}

export interface ISignupModel {
    username?: string | undefined;
    email?: string | undefined;
    password?: string | undefined;
    confirmpassword?: string | undefined;
    mobilenumber?: string | undefined;
    balance?: number;
}

export class LoginModel implements ILoginModel {
    email?: string | undefined;
    password?: string | undefined;

    constructor(data?: ILoginModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.email = _data["email"];
            this.password = _data["password"];
        }
    }

    static fromJS(data: any): LoginModel {
        data = typeof data === 'object' ? data : {};
        let result = new LoginModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        data["password"] = this.password;
        return data; 
    }
}

export interface ILoginModel {
    email?: string | undefined;
    password?: string | undefined;
}

export class IdentityUserOfString implements IIdentityUserOfString {
    id?: string | undefined;
    userName?: string | undefined;
    normalizedUserName?: string | undefined;
    email?: string | undefined;
    normalizedEmail?: string | undefined;
    emailConfirmed?: boolean;
    passwordHash?: string | undefined;
    securityStamp?: string | undefined;
    concurrencyStamp?: string | undefined;
    phoneNumber?: string | undefined;
    phoneNumberConfirmed?: boolean;
    twoFactorEnabled?: boolean;
    lockoutEnd?: Date | undefined;
    lockoutEnabled?: boolean;
    accessFailedCount?: number;

    constructor(data?: IIdentityUserOfString) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.userName = _data["userName"];
            this.normalizedUserName = _data["normalizedUserName"];
            this.email = _data["email"];
            this.normalizedEmail = _data["normalizedEmail"];
            this.emailConfirmed = _data["emailConfirmed"];
            this.passwordHash = _data["passwordHash"];
            this.securityStamp = _data["securityStamp"];
            this.concurrencyStamp = _data["concurrencyStamp"];
            this.phoneNumber = _data["phoneNumber"];
            this.phoneNumberConfirmed = _data["phoneNumberConfirmed"];
            this.twoFactorEnabled = _data["twoFactorEnabled"];
            this.lockoutEnd = _data["lockoutEnd"] ? new Date(_data["lockoutEnd"].toString()) : <any>undefined;
            this.lockoutEnabled = _data["lockoutEnabled"];
            this.accessFailedCount = _data["accessFailedCount"];
        }
    }

    static fromJS(data: any): IdentityUserOfString {
        data = typeof data === 'object' ? data : {};
        let result = new IdentityUserOfString();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["userName"] = this.userName;
        data["normalizedUserName"] = this.normalizedUserName;
        data["email"] = this.email;
        data["normalizedEmail"] = this.normalizedEmail;
        data["emailConfirmed"] = this.emailConfirmed;
        data["passwordHash"] = this.passwordHash;
        data["securityStamp"] = this.securityStamp;
        data["concurrencyStamp"] = this.concurrencyStamp;
        data["phoneNumber"] = this.phoneNumber;
        data["phoneNumberConfirmed"] = this.phoneNumberConfirmed;
        data["twoFactorEnabled"] = this.twoFactorEnabled;
        data["lockoutEnd"] = this.lockoutEnd ? this.lockoutEnd.toISOString() : <any>undefined;
        data["lockoutEnabled"] = this.lockoutEnabled;
        data["accessFailedCount"] = this.accessFailedCount;
        return data; 
    }
}

export interface IIdentityUserOfString {
    id?: string | undefined;
    userName?: string | undefined;
    normalizedUserName?: string | undefined;
    email?: string | undefined;
    normalizedEmail?: string | undefined;
    emailConfirmed?: boolean;
    passwordHash?: string | undefined;
    securityStamp?: string | undefined;
    concurrencyStamp?: string | undefined;
    phoneNumber?: string | undefined;
    phoneNumberConfirmed?: boolean;
    twoFactorEnabled?: boolean;
    lockoutEnd?: Date | undefined;
    lockoutEnabled?: boolean;
    accessFailedCount?: number;
}

export class IdentityUser extends IdentityUserOfString implements IIdentityUser {

    constructor(data?: IIdentityUser) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): IdentityUser {
        data = typeof data === 'object' ? data : {};
        let result = new IdentityUser();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IIdentityUser extends IIdentityUserOfString {
}

export class Applicationuser extends IdentityUser implements IApplicationuser {
    balacnce?: number;

    constructor(data?: IApplicationuser) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.balacnce = _data["balacnce"];
        }
    }

    static fromJS(data: any): Applicationuser {
        data = typeof data === 'object' ? data : {};
        let result = new Applicationuser();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["balacnce"] = this.balacnce;
        super.toJSON(data);
        return data; 
    }
}

export interface IApplicationuser extends IIdentityUser {
    balacnce?: number;
}

export class ResetpasswordModel implements IResetpasswordModel {
    email?: string | undefined;
    password?: string | undefined;
    confirmpassword?: string | undefined;

    constructor(data?: IResetpasswordModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.email = _data["email"];
            this.password = _data["password"];
            this.confirmpassword = _data["confirmpassword"];
        }
    }

    static fromJS(data: any): ResetpasswordModel {
        data = typeof data === 'object' ? data : {};
        let result = new ResetpasswordModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        data["password"] = this.password;
        data["confirmpassword"] = this.confirmpassword;
        return data; 
    }
}

export interface IResetpasswordModel {
    email?: string | undefined;
    password?: string | undefined;
    confirmpassword?: string | undefined;
}

export class UserModel implements IUserModel {
    user?: Applicationuser | undefined;
    expenses?: Expense[] | undefined;
    groups?: Group[] | undefined;
    owesfrom?: PayerModel[] | undefined;
    owsto?: PayerModel[] | undefined;
    activities?: Activity[] | undefined;
    transactions?: Transaction[] | undefined;

    constructor(data?: IUserModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.user = _data["user"] ? Applicationuser.fromJS(_data["user"]) : <any>undefined;
            if (Array.isArray(_data["expenses"])) {
                this.expenses = [] as any;
                for (let item of _data["expenses"])
                    this.expenses!.push(Expense.fromJS(item));
            }
            if (Array.isArray(_data["groups"])) {
                this.groups = [] as any;
                for (let item of _data["groups"])
                    this.groups!.push(Group.fromJS(item));
            }
            if (Array.isArray(_data["owesfrom"])) {
                this.owesfrom = [] as any;
                for (let item of _data["owesfrom"])
                    this.owesfrom!.push(PayerModel.fromJS(item));
            }
            if (Array.isArray(_data["owsto"])) {
                this.owsto = [] as any;
                for (let item of _data["owsto"])
                    this.owsto!.push(PayerModel.fromJS(item));
            }
            if (Array.isArray(_data["activities"])) {
                this.activities = [] as any;
                for (let item of _data["activities"])
                    this.activities!.push(Activity.fromJS(item));
            }
            if (Array.isArray(_data["transactions"])) {
                this.transactions = [] as any;
                for (let item of _data["transactions"])
                    this.transactions!.push(Transaction.fromJS(item));
            }
        }
    }

    static fromJS(data: any): UserModel {
        data = typeof data === 'object' ? data : {};
        let result = new UserModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["user"] = this.user ? this.user.toJSON() : <any>undefined;
        if (Array.isArray(this.expenses)) {
            data["expenses"] = [];
            for (let item of this.expenses)
                data["expenses"].push(item.toJSON());
        }
        if (Array.isArray(this.groups)) {
            data["groups"] = [];
            for (let item of this.groups)
                data["groups"].push(item.toJSON());
        }
        if (Array.isArray(this.owesfrom)) {
            data["owesfrom"] = [];
            for (let item of this.owesfrom)
                data["owesfrom"].push(item.toJSON());
        }
        if (Array.isArray(this.owsto)) {
            data["owsto"] = [];
            for (let item of this.owsto)
                data["owsto"].push(item.toJSON());
        }
        if (Array.isArray(this.activities)) {
            data["activities"] = [];
            for (let item of this.activities)
                data["activities"].push(item.toJSON());
        }
        if (Array.isArray(this.transactions)) {
            data["transactions"] = [];
            for (let item of this.transactions)
                data["transactions"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IUserModel {
    user?: Applicationuser | undefined;
    expenses?: Expense[] | undefined;
    groups?: Group[] | undefined;
    owesfrom?: PayerModel[] | undefined;
    owsto?: PayerModel[] | undefined;
    activities?: Activity[] | undefined;
    transactions?: Transaction[] | undefined;
}

export class Expense implements IExpense {
    groupId?: number | undefined;
    group?: Group | undefined;
    expenseId?: number;
    title?: string | undefined;
    splitType?: string | undefined;
    amount?: number;
    date?: string | undefined;
    userId?: string | undefined;
    user?: Applicationuser | undefined;

    constructor(data?: IExpense) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.groupId = _data["groupId"];
            this.group = _data["group"] ? Group.fromJS(_data["group"]) : <any>undefined;
            this.expenseId = _data["expenseId"];
            this.title = _data["title"];
            this.splitType = _data["splitType"];
            this.amount = _data["amount"];
            this.date = _data["date"];
            this.userId = _data["userId"];
            this.user = _data["user"] ? Applicationuser.fromJS(_data["user"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Expense {
        data = typeof data === 'object' ? data : {};
        let result = new Expense();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["groupId"] = this.groupId;
        data["group"] = this.group ? this.group.toJSON() : <any>undefined;
        data["expenseId"] = this.expenseId;
        data["title"] = this.title;
        data["splitType"] = this.splitType;
        data["amount"] = this.amount;
        data["date"] = this.date;
        data["userId"] = this.userId;
        data["user"] = this.user ? this.user.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IExpense {
    groupId?: number | undefined;
    group?: Group | undefined;
    expenseId?: number;
    title?: string | undefined;
    splitType?: string | undefined;
    amount?: number;
    date?: string | undefined;
    userId?: string | undefined;
    user?: Applicationuser | undefined;
}

export class Group implements IGroup {
    groupId?: number;
    title?: string | undefined;
    creatorIdId?: string | undefined;
    createdby?: Applicationuser | undefined;
    date?: string | undefined;
    amount?: number;

    constructor(data?: IGroup) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.groupId = _data["groupId"];
            this.title = _data["title"];
            this.creatorIdId = _data["creatorIdId"];
            this.createdby = _data["createdby"] ? Applicationuser.fromJS(_data["createdby"]) : <any>undefined;
            this.date = _data["date"];
            this.amount = _data["amount"];
        }
    }

    static fromJS(data: any): Group {
        data = typeof data === 'object' ? data : {};
        let result = new Group();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["groupId"] = this.groupId;
        data["title"] = this.title;
        data["creatorIdId"] = this.creatorIdId;
        data["createdby"] = this.createdby ? this.createdby.toJSON() : <any>undefined;
        data["date"] = this.date;
        data["amount"] = this.amount;
        return data; 
    }
}

export interface IGroup {
    groupId?: number;
    title?: string | undefined;
    creatorIdId?: string | undefined;
    createdby?: Applicationuser | undefined;
    date?: string | undefined;
    amount?: number;
}

export class PayerModel implements IPayerModel {
    payerId?: string | undefined;
    payer?: Applicationuser | undefined;
    amount?: number;

    constructor(data?: IPayerModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.payerId = _data["payerId"];
            this.payer = _data["payer"] ? Applicationuser.fromJS(_data["payer"]) : <any>undefined;
            this.amount = _data["amount"];
        }
    }

    static fromJS(data: any): PayerModel {
        data = typeof data === 'object' ? data : {};
        let result = new PayerModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["payerId"] = this.payerId;
        data["payer"] = this.payer ? this.payer.toJSON() : <any>undefined;
        data["amount"] = this.amount;
        return data; 
    }
}

export interface IPayerModel {
    payerId?: string | undefined;
    payer?: Applicationuser | undefined;
    amount?: number;
}

export class Activity implements IActivity {
    activityId?: number;
    userId?: string | undefined;
    user?: Applicationuser | undefined;
    activitydata?: string | undefined;
    date?: string | undefined;

    constructor(data?: IActivity) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.activityId = _data["activityId"];
            this.userId = _data["userId"];
            this.user = _data["user"] ? Applicationuser.fromJS(_data["user"]) : <any>undefined;
            this.activitydata = _data["activitydata"];
            this.date = _data["date"];
        }
    }

    static fromJS(data: any): Activity {
        data = typeof data === 'object' ? data : {};
        let result = new Activity();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["activityId"] = this.activityId;
        data["userId"] = this.userId;
        data["user"] = this.user ? this.user.toJSON() : <any>undefined;
        data["activitydata"] = this.activitydata;
        data["date"] = this.date;
        return data; 
    }
}

export interface IActivity {
    activityId?: number;
    userId?: string | undefined;
    user?: Applicationuser | undefined;
    activitydata?: string | undefined;
    date?: string | undefined;
}

export class Transaction implements ITransaction {
    trasactionId?: number;
    payerId?: string | undefined;
    payer?: Applicationuser | undefined;
    payeeId?: string | undefined;
    payee?: Applicationuser | undefined;
    paidAmount?: number;
    settelementId?: number;
    settelement?: Settelement | undefined;

    constructor(data?: ITransaction) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.trasactionId = _data["trasactionId"];
            this.payerId = _data["payerId"];
            this.payer = _data["payer"] ? Applicationuser.fromJS(_data["payer"]) : <any>undefined;
            this.payeeId = _data["payeeId"];
            this.payee = _data["payee"] ? Applicationuser.fromJS(_data["payee"]) : <any>undefined;
            this.paidAmount = _data["paidAmount"];
            this.settelementId = _data["settelementId"];
            this.settelement = _data["settelement"] ? Settelement.fromJS(_data["settelement"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Transaction {
        data = typeof data === 'object' ? data : {};
        let result = new Transaction();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["trasactionId"] = this.trasactionId;
        data["payerId"] = this.payerId;
        data["payer"] = this.payer ? this.payer.toJSON() : <any>undefined;
        data["payeeId"] = this.payeeId;
        data["payee"] = this.payee ? this.payee.toJSON() : <any>undefined;
        data["paidAmount"] = this.paidAmount;
        data["settelementId"] = this.settelementId;
        data["settelement"] = this.settelement ? this.settelement.toJSON() : <any>undefined;
        return data; 
    }
}

export interface ITransaction {
    trasactionId?: number;
    payerId?: string | undefined;
    payer?: Applicationuser | undefined;
    payeeId?: string | undefined;
    payee?: Applicationuser | undefined;
    paidAmount?: number;
    settelementId?: number;
    settelement?: Settelement | undefined;
}

export class Settelement implements ISettelement {
    settelementId?: number;
    expenseId?: number;
    expense?: Expense | undefined;
    settelementAmount?: number;
    borrowerId?: string | undefined;
    borrower?: Applicationuser | undefined;
    lenterId?: string | undefined;
    lenter?: Applicationuser | undefined;
    groupId?: number | undefined;
    group?: Group | undefined;

    constructor(data?: ISettelement) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.settelementId = _data["settelementId"];
            this.expenseId = _data["expenseId"];
            this.expense = _data["expense"] ? Expense.fromJS(_data["expense"]) : <any>undefined;
            this.settelementAmount = _data["settelementAmount"];
            this.borrowerId = _data["borrowerId"];
            this.borrower = _data["borrower"] ? Applicationuser.fromJS(_data["borrower"]) : <any>undefined;
            this.lenterId = _data["lenterId"];
            this.lenter = _data["lenter"] ? Applicationuser.fromJS(_data["lenter"]) : <any>undefined;
            this.groupId = _data["groupId"];
            this.group = _data["group"] ? Group.fromJS(_data["group"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Settelement {
        data = typeof data === 'object' ? data : {};
        let result = new Settelement();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["settelementId"] = this.settelementId;
        data["expenseId"] = this.expenseId;
        data["expense"] = this.expense ? this.expense.toJSON() : <any>undefined;
        data["settelementAmount"] = this.settelementAmount;
        data["borrowerId"] = this.borrowerId;
        data["borrower"] = this.borrower ? this.borrower.toJSON() : <any>undefined;
        data["lenterId"] = this.lenterId;
        data["lenter"] = this.lenter ? this.lenter.toJSON() : <any>undefined;
        data["groupId"] = this.groupId;
        data["group"] = this.group ? this.group.toJSON() : <any>undefined;
        return data; 
    }
}

export interface ISettelement {
    settelementId?: number;
    expenseId?: number;
    expense?: Expense | undefined;
    settelementAmount?: number;
    borrowerId?: string | undefined;
    borrower?: Applicationuser | undefined;
    lenterId?: string | undefined;
    lenter?: Applicationuser | undefined;
    groupId?: number | undefined;
    group?: Group | undefined;
}

export class ExpenseModel implements IExpenseModel {
    expense?: Expense | undefined;
    payers?: PayerModel[] | undefined;
    shares?: Share[] | undefined;

    constructor(data?: IExpenseModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.expense = _data["expense"] ? Expense.fromJS(_data["expense"]) : <any>undefined;
            if (Array.isArray(_data["payers"])) {
                this.payers = [] as any;
                for (let item of _data["payers"])
                    this.payers!.push(PayerModel.fromJS(item));
            }
            if (Array.isArray(_data["shares"])) {
                this.shares = [] as any;
                for (let item of _data["shares"])
                    this.shares!.push(Share.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ExpenseModel {
        data = typeof data === 'object' ? data : {};
        let result = new ExpenseModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["expense"] = this.expense ? this.expense.toJSON() : <any>undefined;
        if (Array.isArray(this.payers)) {
            data["payers"] = [];
            for (let item of this.payers)
                data["payers"].push(item.toJSON());
        }
        if (Array.isArray(this.shares)) {
            data["shares"] = [];
            for (let item of this.shares)
                data["shares"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IExpenseModel {
    expense?: Expense | undefined;
    payers?: PayerModel[] | undefined;
    shares?: Share[] | undefined;
}

export class Share implements IShare {
    shareId?: number;
    expenseId?: number;
    expense?: Expense | undefined;
    userId?: string | undefined;
    user?: Applicationuser | undefined;
    sharePercentage?: number;
    shareAmount?: number;

    constructor(data?: IShare) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.shareId = _data["shareId"];
            this.expenseId = _data["expenseId"];
            this.expense = _data["expense"] ? Expense.fromJS(_data["expense"]) : <any>undefined;
            this.userId = _data["userId"];
            this.user = _data["user"] ? Applicationuser.fromJS(_data["user"]) : <any>undefined;
            this.sharePercentage = _data["sharePercentage"];
            this.shareAmount = _data["shareAmount"];
        }
    }

    static fromJS(data: any): Share {
        data = typeof data === 'object' ? data : {};
        let result = new Share();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["shareId"] = this.shareId;
        data["expenseId"] = this.expenseId;
        data["expense"] = this.expense ? this.expense.toJSON() : <any>undefined;
        data["userId"] = this.userId;
        data["user"] = this.user ? this.user.toJSON() : <any>undefined;
        data["sharePercentage"] = this.sharePercentage;
        data["shareAmount"] = this.shareAmount;
        return data; 
    }
}

export interface IShare {
    shareId?: number;
    expenseId?: number;
    expense?: Expense | undefined;
    userId?: string | undefined;
    user?: Applicationuser | undefined;
    sharePercentage?: number;
    shareAmount?: number;
}

export class BorrowLentModel implements IBorrowLentModel {
    borrowerId?: string | undefined;
    lenterId?: string | undefined;
    borrower?: Applicationuser | undefined;
    lenter?: Applicationuser | undefined;
    amount?: number;

    constructor(data?: IBorrowLentModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.borrowerId = _data["borrowerId"];
            this.lenterId = _data["lenterId"];
            this.borrower = _data["borrower"] ? Applicationuser.fromJS(_data["borrower"]) : <any>undefined;
            this.lenter = _data["lenter"] ? Applicationuser.fromJS(_data["lenter"]) : <any>undefined;
            this.amount = _data["amount"];
        }
    }

    static fromJS(data: any): BorrowLentModel {
        data = typeof data === 'object' ? data : {};
        let result = new BorrowLentModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["borrowerId"] = this.borrowerId;
        data["lenterId"] = this.lenterId;
        data["borrower"] = this.borrower ? this.borrower.toJSON() : <any>undefined;
        data["lenter"] = this.lenter ? this.lenter.toJSON() : <any>undefined;
        data["amount"] = this.amount;
        return data; 
    }
}

export interface IBorrowLentModel {
    borrowerId?: string | undefined;
    lenterId?: string | undefined;
    borrower?: Applicationuser | undefined;
    lenter?: Applicationuser | undefined;
    amount?: number;
}

export class Friend implements IFriend {
    friendId?: number;
    userId?: string | undefined;
    user?: Applicationuser | undefined;
    frndId?: string | undefined;
    frnd?: Applicationuser | undefined;

    constructor(data?: IFriend) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.friendId = _data["friendId"];
            this.userId = _data["userId"];
            this.user = _data["user"] ? Applicationuser.fromJS(_data["user"]) : <any>undefined;
            this.frndId = _data["frndId"];
            this.frnd = _data["frnd"] ? Applicationuser.fromJS(_data["frnd"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Friend {
        data = typeof data === 'object' ? data : {};
        let result = new Friend();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["friendId"] = this.friendId;
        data["userId"] = this.userId;
        data["user"] = this.user ? this.user.toJSON() : <any>undefined;
        data["frndId"] = this.frndId;
        data["frnd"] = this.frnd ? this.frnd.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IFriend {
    friendId?: number;
    userId?: string | undefined;
    user?: Applicationuser | undefined;
    frndId?: string | undefined;
    frnd?: Applicationuser | undefined;
}

export class GroupModel implements IGroupModel {
    group?: Group | undefined;
    expenses?: Expense[] | undefined;
    members?: Applicationuser[] | undefined;
    membersId?: string[] | undefined;

    constructor(data?: IGroupModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.group = _data["group"] ? Group.fromJS(_data["group"]) : <any>undefined;
            if (Array.isArray(_data["expenses"])) {
                this.expenses = [] as any;
                for (let item of _data["expenses"])
                    this.expenses!.push(Expense.fromJS(item));
            }
            if (Array.isArray(_data["members"])) {
                this.members = [] as any;
                for (let item of _data["members"])
                    this.members!.push(Applicationuser.fromJS(item));
            }
            if (Array.isArray(_data["membersId"])) {
                this.membersId = [] as any;
                for (let item of _data["membersId"])
                    this.membersId!.push(item);
            }
        }
    }

    static fromJS(data: any): GroupModel {
        data = typeof data === 'object' ? data : {};
        let result = new GroupModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["group"] = this.group ? this.group.toJSON() : <any>undefined;
        if (Array.isArray(this.expenses)) {
            data["expenses"] = [];
            for (let item of this.expenses)
                data["expenses"].push(item.toJSON());
        }
        if (Array.isArray(this.members)) {
            data["members"] = [];
            for (let item of this.members)
                data["members"].push(item.toJSON());
        }
        if (Array.isArray(this.membersId)) {
            data["membersId"] = [];
            for (let item of this.membersId)
                data["membersId"].push(item);
        }
        return data; 
    }
}

export interface IGroupModel {
    group?: Group | undefined;
    expenses?: Expense[] | undefined;
    members?: Applicationuser[] | undefined;
    membersId?: string[] | undefined;
}

export class TransactionModel implements ITransactionModel {
    payerId?: string | undefined;
    payeeId?: string | undefined;
    paidAmount?: number;
    settelementId?: number;

    constructor(data?: ITransactionModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.payerId = _data["payerId"];
            this.payeeId = _data["payeeId"];
            this.paidAmount = _data["paidAmount"];
            this.settelementId = _data["settelementId"];
        }
    }

    static fromJS(data: any): TransactionModel {
        data = typeof data === 'object' ? data : {};
        let result = new TransactionModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["payerId"] = this.payerId;
        data["payeeId"] = this.payeeId;
        data["paidAmount"] = this.paidAmount;
        data["settelementId"] = this.settelementId;
        return data; 
    }
}

export interface ITransactionModel {
    payerId?: string | undefined;
    payeeId?: string | undefined;
    paidAmount?: number;
    settelementId?: number;
}

export interface FileResponse {
    data: Blob;
    status: number;
    fileName?: string;
    headers?: { [name: string]: any };
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}

}